# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: icelerio

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: migrations


# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    REGION: 'localhost'
    HOST: 'http://localhost:8000'
    ACCESS_KEY: 'DEFAULT_ACCESS_KEY'
    SECRET: DEFAULT_SECRET
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: icelerio-blog/blog.create
    events:
      - http:
          path: icelerio-blog
          method: post
          cors: true
  list:
    handler: icelerio-blog/blog.list
    events:
      - http:
          path: icelerio-blog
          method: get
          cors: true
  get:
    handler: icelerio-blog/blog.get
    events:
      - http:
          path: icelerio-blog/{id}
          method: get
          cors: true

  update:
    handler: icelerio-blog/blog.update
    events:
      - http:
          path: icelerio-blog/{id}
          method: put
          cors: true

  delete:
    handler: icelerio-blog/blog.delete
    events:
      - http:
          path: icelerio-blog/{id}
          method: delete
          cors: true



resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}